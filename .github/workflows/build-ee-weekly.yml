 #.github/workflows/build-ee-latest.yml
name: Build and Push latest Multi-Arch Execution Environment

on:
  workflow_dispatch:
  # schedule:
  #  - cron: '15 3 * * 0' # Runs at 3:15 AM UTC on Sunday

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/sap-ee-dev

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      # Matrix-Strategie, um Builds parallel auszuführen, falls Runner verfügbar sind.
      # Hier wird jedoch auf einem einzigen Runner emuliert.
      matrix:
        platform:
          - amd64
          - arm64
          - ppc64le
    steps:
      # get current date and use as tag
      - name: Get current date for tagging
        id: date
        run: echo "DATE_TAG=$(date +'%y%m%d')" >> $GITHUB_ENV

      # Checkout repo
      - name: Checkout repository
        uses: actions/checkout@v4

      # Dieser Schritt ist entscheidend: Er konfiguriert QEMU und binfmt_misc auf dem Runner.
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all # Stellt sicher, dass alle Architekturen emuliert werden können

      # Anmeldung bei der Container Registry
      - name: Log in to the Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Schritt 1: Build-Kontext mit ansible-builder erstellen
      - name: Create build context
        run: |
          pip install ansible-builder
          ansible-builder create -v 3 -f execution-environment-weekly.yml

      # Schritt 2: Image für die jeweilige Plattform bauen und pushen
      # Das Image wird direkt mit einem architektur-spezifischen Tag gepusht.
      - name: Build and push platform-specific image
        run: |
          podman build \
            --platform=linux/${{ matrix.platform }} \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.DATE_TAG }}_${{ matrix.platform }} \
            --layers=false \
            -f context/Containerfile context
          podman push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.DATE_TAG }}_${{ matrix.platform }}

  # Ein separater Job, der nach Abschluss aller plattform-spezifischen Builds läuft.
  create-manifest:
    runs-on: ubuntu-latest
    needs: build # Stellt sicher, dass dieser Job erst nach dem 'build'-Job startet
    steps:
      # get current date and use as tag
      - name: Get current date for tagging
        id: date
        run: echo "DATE_TAG=$(date +'%y%m%d')" >> $GITHUB_ENV

      - name: Log in to the Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Erstellt die Manifest-Liste und fügt die zuvor gepushten Images hinzu.
      - name: Create and push manifest list
        run: |
          podman manifest create ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.DATE_TAG }}
          podman manifest add ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.DATE_TAG }} docker://${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.DATE_TAG }}_amd64
          podman manifest add ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.DATE_TAG }} docker://${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.DATE_TAG }}_arm64
          podman manifest add ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.DATE_TAG }} docker://${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.DATE_TAG }}_ppc64le
          podman manifest push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.DATE_TAG }}
